--- /tmp/controller-5.py	2022-12-04 23:44:51.827062284 +0300
+++ ./mysql-operator.py	2022-12-05 20:54:18.027007148 +0300
@@ -3,6 +3,7 @@
 import kubernetes
 import time
 from jinja2 import Environment, FileSystemLoader
+import logging
 
 
 def wait_until_job_end(jobname):
@@ -15,32 +16,67 @@
         jobs = api.list_namespaced_job('default')
         for job in jobs.items:
             if job.metadata.name == jobname:
-                print(f"job with { jobname }  found,wait untill end")
+                logging.info(f"Job with name:[{jobname}] found, wait untill end")
                 if job.status.succeeded == 1:
-                    print(f"job with { jobname }  success")
                     job_finished = True
+                    logging.info(f"Job with name:[{jobname}] end sucessful")
 
 
 def render_template(filename, vars_dict):
     env = Environment(loader=FileSystemLoader('./templates'))
     template = env.get_template(filename)
     yaml_manifest = template.render(vars_dict)
-    json_manifest = yaml.load(yaml_manifest)
+    json_manifest = yaml.safe_load(yaml_manifest)
     return json_manifest
 
 
 def delete_success_jobs(mysql_instance_name):
-    print("start deletion")
     api = kubernetes.client.BatchV1Api()
     jobs = api.list_namespaced_job('default')
     for job in jobs.items:
         jobname = job.metadata.name
         if (jobname == f"backup-{mysql_instance_name}-job") or \
-                (jobname == f"restore-{mysql_instance_name}-job"):
+                (jobname == f"restore-{mysql_instance_name}-job") or \
+                (jobname == f"change-password-{mysql_instance_name}-job"):
             if job.status.succeeded == 1:
                 api.delete_namespaced_job(jobname,
                                           'default',
                                           propagation_policy='Background')
+                logging.info(f"Job with name:[{jobname}] deleted")
+            else:
+                logging.info(f"Job with name:[{jobname}] unsucceeded state NOT deleted")
+
+
+@kopf.on.field('otus.homework', 'v1', 'mysqls', field='spec.password')
+def password_changed(body, old, new, **_):
+    name = body['metadata']['name']
+    image = body['spec']['image']
+    database = body['spec']['database']
+    old_password = old
+    new_password = new
+
+    if old_password and new_password:
+        change_password_job = render_template('change-password-job.yml.j2', {
+            'name': name,
+            'image': image,
+            'old_password': old_password,
+            'new_password': new_password,
+            'database': database
+            })
+
+        api = kubernetes.client.BatchV1Api()
+        change_password_job_name = change_password_job['metadata']['name']
+        try:
+            api.delete_namespaced_job(change_password_job_name,
+                    'default', propagation_policy='Background')
+        except kubernetes.client.ApiException as e:
+            logging.info(f"Exception when calling delete_namespaced_job:[{change_password_job_name}] {e}")
+        
+        try:
+            api.create_namespaced_job('default', change_password_job)
+            wait_until_job_end(f"change-password-{name}-job")
+        except kubernetes.client.ApiException as e:
+            logging.info(f"Exception when calling create_namespaced_job:[{change_password_job_name}] {e}")
 
 
 @kopf.on.create('otus.homework', 'v1', 'mysqls')
@@ -52,6 +88,8 @@
     database = body['spec']['database']
     storage_size = body['spec']['storage_size']
 
+    logging.info(f"A handler is called with body: {body}")
+
     # Генерируем JSON манифесты для деплоя
     persistent_volume = render_template('mysql-pv.yml.j2',
                                         {'name': name,
@@ -91,32 +129,45 @@
     # Создаем mysql Deployment:
     api = kubernetes.client.AppsV1Api()
     api.create_namespaced_deployment('default', deployment)
-    # Пытаемся восстановиться из backup
-    try:
-        api = kubernetes.client.BatchV1Api()
-        api.create_namespaced_job('default', restore_job)
-    except kubernetes.client.rest.ApiException:
-        pass
 
-    # Cоздаем PVC  и PV для бэкапов:
+    # Cоздаем PVC и PV для бэкапов:
     try:
-        backup_pv = render_template('backup-pv.yml.j2', {'name': name})
+        backup_pv = render_template('backup-pv.yml.j2', {'name': name, 'storage_size': storage_size})
         api = kubernetes.client.CoreV1Api()
-        print(api.create_persistent_volume(backup_pv))
         api.create_persistent_volume(backup_pv)
-    except kubernetes.client.rest.ApiException:
+    except kubernetes.client.ApiException:
         pass
 
+    new_pvc_created = False
     try:
-        backup_pvc = render_template('backup-pvc.yml.j2', {'name': name})
+        backup_pvc = render_template('backup-pvc.yml.j2', {'name': name, 'storage_size': storage_size})
         api = kubernetes.client.CoreV1Api()
         api.create_namespaced_persistent_volume_claim('default', backup_pvc)
-    except kubernetes.client.rest.ApiException:
+        new_pvc_created = True
+    except kubernetes.client.ApiException:
         pass
 
+    # Пытаемся восстановиться из backup
+    status_restore_job = "unknown"
+    if not new_pvc_created:
+        restore_job_name = restore_job['metadata']['name']
+        logging.info(f"Start restore job name:[{restore_job_name}]")
+        try:
+            api = kubernetes.client.BatchV1Api()
+            api.create_namespaced_job('default', restore_job)
+            wait_until_job_end(restore_job_name)
+            logging.info(f"End restore job name:[{restore_job_name}]")
+            status_restore_job = "successful"
+        except kubernetes.client.ApiException:
+            logging.info(f"Fail restore job name:[{restore_job_name}]")
+            status_restore_job = "failed"
+    else:
+        status_restore_job = "previous backup not found"
+
+    return {'restoreJob': str(status_restore_job)}
 
 @kopf.on.delete('otus.homework', 'v1', 'mysqls')
-def delete_object_make_backup(body, **kwargs):
+def delete_object_make_backup(body, **_):
     name = body['metadata']['name']
     image = body['spec']['image']
     password = body['spec']['password']
@@ -133,4 +184,14 @@
         'database': database})
     api.create_namespaced_job('default', backup_job)
     wait_until_job_end(f"backup-{name}-job")
-    return {'message': "mysql and its children resources deleted"}
\ No newline at end of file
+
+    persistent_volume = render_template('mysql-pv.yml.j2', {'name': name})
+    ms_pv_name = persistent_volume['metadata']['name']
+    try:
+        api = kubernetes.client.CoreV1Api()
+        api.delete_persistent_volume(ms_pv_name)
+        logging.info(f"PV with name:[{ms_pv_name}] delete sucessful")
+    except kubernetes.client.ApiException:
+        logging.info(f"PV with name:[{ms_pv_name}] delete failed")
+
+    return {'message': "mysql and its children resources deleted"}
